"""
Cyclical figurate numbers

Problem 61
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) 
numbers and are generated by the following formulae:
    Triangle        P3(n)=n(n+1)/2       1, 3, 6, 10, 15, ...
    Square          P4(n)=n^2             1, 4, 9, 16, 25, ...
    Pentagonal      P5(n)=n(3n−1)/2      1, 5, 12, 22, 35, ...
    Hexagonal       P6(n)=n(2n−1)        1, 6, 15, 28, 45, ...
    Heptagonal      P7(n)=n(5n−3)/2      1, 7, 18, 34, 55, ...
    Octagonal       P8(n)=n(3n−2)        1, 8, 21, 40, 65, ...

    The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

        1. The set is cyclic, in that the last two digits of each number is the first two digits of the 
        next number (including the last number with the first).

        2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented 
        by a different number in the set.

        3. This is the only set of 4-digit numbers with this property.

        Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: 
        triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

"""
from itertools import permutations

def triangle(n):
    return (n*(n+1)) // 2

def square(n):
    return n**2

def pentagonal(n):
    return (n *(3*n - 1)) // 2

def hexagonal(n):
    return n * (2*n - 1)

def heptagonal(n):
    return (n * (5*n - 3)) // 2

def octagonal(n):
    return n * (3 * n - 2)

def iscyclical(a,b):
    return a % 100 == b // 100

def solve():
    Figurates = {}
    for figurate in (triangle, square, pentagonal, hexagonal, heptagonal, octagonal):
        Figurates[figurate.__name__] = []
        n = 1
        while True:
            result = figurate(n)
            if result > 9999:
                break
            if result > 999:
                Figurates[figurate.__name__].append(result)
            n += 1
    for perm in permutations(('triangle', 'square', 'pentagonal', 'hexagonal', 'heptagonal', 'octagonal')):
        a,b,c,d,e,f = perm
        answer = ((t, s, p, hx, hp, o)
                for t in Figurates[a]
                for s in Figurates[b]
                if iscyclical(t,s)
                for p in Figurates[c]
                if iscyclical(s,p)
                for hx in Figurates[d]
                if iscyclical(p,hx) 
                for hp in Figurates[e]
                if iscyclical(hx,hp) 
                for o in Figurates[f]
                if iscyclical(hp,o)
                if iscyclical(o,t)
                )                         
        try:
            return sum(next(answer))
        except StopIteration:
            pass
    
if __name__=='__main__':
    print(solve())
